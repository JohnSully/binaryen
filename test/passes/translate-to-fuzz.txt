(module
 (type $FUNCSIG$i (func (result i32)))
 (type $FUNCSIG$dd (func (param f64) (result f64)))
 (type $FUNCSIG$v (func))
 (type $FUNCSIG$df (func (param f32) (result f64)))
 (global $hangLimit (mut i32) (i32.const 100))
 (table 10 anyfunc)
 (elem (i32.const 0) $func_0 $func_0 $func_1 $func_4 $func_5 $func_5 $func_8 $func_11 $func_15 $func_17)
 (memory $0 1 1)
 (export "func_0" (func $func_0))
 (export "func_1" (func $func_1))
 (export "func_2" (func $func_2))
 (export "func_3" (func $func_3))
 (export "func_4" (func $func_4))
 (export "func_6" (func $func_6))
 (export "func_9" (func $func_9))
 (export "func_13" (func $func_13))
 (export "func_15" (func $func_15))
 (export "func_17" (func $func_17))
 (export "func_18" (func $func_18))
 (export "func_19" (func $func_19))
 (export "func_21" (func $func_21))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $func_0 (result i32)
  (local $0 f32)
  (local $1 i64)
  (local $2 f32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i32.const -11)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (loop $label$0
   (block
    (if
     (i32.eqz
      (get_global $hangLimit)
     )
     (return
      (i32.const 26963)
     )
    )
    (set_global $hangLimit
     (i32.sub
      (get_global $hangLimit)
      (i32.const 1)
     )
    )
   )
   (i64.trunc_u/f64
    (drop
     (loop $label$3
      (block
       (if
        (i32.eqz
         (get_global $hangLimit)
        )
        (return
         (i32.const 32767)
        )
       )
       (set_global $hangLimit
        (i32.sub
         (get_global $hangLimit)
         (i32.const 1)
        )
       )
      )
      (return
       (i32.const -73)
      )
     )
    )
   )
  )
 )
 (func $func_1 (param $0 f32) (param $1 f64) (result i32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i32.const -34)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i32)
   (return
    (i32.const 66)
   )
  )
 )
 (func $func_2 (result i64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i64.const -6)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i64)
   (return
    (i64.const 6174)
   )
  )
 )
 (func $func_3 (result f64)
  (local $0 i64)
  (local $1 i64)
  (local $2 f64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (get_local $2)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (call $deNan64
   (f64.max
    (f64.const -nan:0xfffffffffffb3)
    (tee_local $2
     (call $deNan64
      (select
       (call $deNan64
        (f64.div
         (block $label$1 (result f64)
          (return
           (f64.const 2147483647)
          )
         )
         (call $deNan64
          (f64.mul
           (call $deNan64
            (select
             (loop $label$2 (result f64)
              (block
               (if
                (i32.eqz
                 (get_global $hangLimit)
                )
                (return
                 (f64.const 18446744073709551615)
                )
               )
               (set_global $hangLimit
                (i32.sub
                 (get_global $hangLimit)
                 (i32.const 1)
                )
               )
              )
              (f64.const -nan:0xffffffffffff4)
             )
             (get_local $2)
             (i32.load8_s offset=3
              (i32.and
               (i32.load16_s offset=4
                (i32.and
                 (i32.const 12602)
                 (i32.const 31)
                )
               )
               (i32.const 31)
              )
             )
            )
           )
           (get_local $2)
          )
         )
        )
       )
       (call $deNan64
        (select
         (f64.load offset=22
          (i32.and
           (i32.load16_u offset=22 align=1
            (i32.and
             (i32.const 32767)
             (i32.const 31)
            )
           )
           (i32.const 31)
          )
         )
         (call $deNan64
          (f64.convert_s/i32
           (i32.const 176)
          )
         )
         (i32.const 1)
        )
       )
       (block $label$0 (result i32)
        (return
         (f64.const 110)
        )
       )
      )
     )
    )
   )
  )
 )
 (func $func_4 (param $0 f64) (param $1 f64) (result f32)
  (local $2 i64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (f32.const 4.136946824350359e-25)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result f32)
   (block $label$1 (result f32)
    (loop $label$2 (result f32)
     (block
      (if
       (i32.eqz
        (get_global $hangLimit)
       )
       (return
        (f32.const -2147483648)
       )
      )
      (set_global $hangLimit
       (i32.sub
        (get_global $hangLimit)
        (i32.const 1)
       )
      )
     )
     (f32.const 1.5518369315425492e-36)
    )
   )
  )
 )
 (func $func_5 (param $0 f64) (result f64)
  (local $1 f64)
  (local $2 i64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (get_local $1)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result f64)
   (return
    (f64.const -nan:0xfffffffffffeb)
   )
  )
 )
 (func $func_6 (param $0 i32) (result i64)
  (local $1 f64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i64.const 9223372036854775807)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i64)
   (block $label$1 (result i64)
    (return
     (i64.const -94)
    )
   )
  )
 )
 (func $func_7 (result f64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (f64.const 246)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result f64)
   (return
    (f64.const 2)
   )
  )
 )
 (func $func_8
  (local $0 f32)
  (local $1 i64)
  (local $2 f64)
  (local $3 i64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return)
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i64.store8 offset=4
   (i32.and
    (i32.const 48)
    (i32.const 31)
   )
   (call $func_2)
  )
 )
 (func $func_9 (result f64)
  (local $0 i64)
  (local $1 i64)
  (local $2 f32)
  (local $3 i64)
  (local $4 f32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (f64.const 18446744073709551615)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (f64.load offset=4
   (i32.and
    (block $label$0 (result i32)
     (block $label$1 (result i32)
      (return
       (f64.const -99)
      )
     )
    )
    (i32.const 31)
   )
  )
 )
 (func $func_10 (result f32)
  (local $0 i64)
  (local $1 f32)
  (local $2 f32)
  (local $3 f64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (get_local $1)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (return
    (get_local $2)
   )
  )
 )
 (func $func_11 (result i32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i32.const 1954248050)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i32.popcnt
   (block $label$0 (result i32)
    (call_indirect $FUNCSIG$i
     (i32.const 0)
    )
   )
  )
 )
 (func $func_12 (result f64)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 f64)
  (local $4 i64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (f64.const -88)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result f64)
   (call_indirect $FUNCSIG$dd
    (call_indirect $FUNCSIG$dd
     (call_indirect $FUNCSIG$dd
      (f64.load offset=4 align=1
       (i32.and
        (tee_local $0
         (i32.rem_s
          (call $func_1
           (f32.const 20)
           (tee_local $3
            (if (result f64)
             (select
              (i32.wrap/i64
               (i64.const 0)
              )
              (i32.load offset=4 align=2
               (i32.and
                (get_local $1)
                (i32.const 31)
               )
              )
              (i32.trunc_s/f64
               (f64.const 4294967295)
              )
             )
             (block $label$1 (result f64)
              (return
               (get_local $3)
              )
             )
             (block $label$2 (result f64)
              (return
               (get_local $3)
              )
             )
            )
           )
          )
          (if (result i32)
           (i32.eqz
            (i64.le_s
             (if (result i64)
              (i32.eqz
               (select
                (i32.div_u
                 (i32.const 4)
                 (i32.const 65533)
                )
                (i32.load offset=22 align=2
                 (i32.and
                  (get_local $1)
                  (i32.const 31)
                 )
                )
                (tee_local $1
                 (tee_local $0
                  (i32.const 10282)
                 )
                )
               )
              )
              (block $label$3 (result i64)
               (return
                (f64.const 14675337377663989850308608)
               )
              )
              (block $label$4 (result i64)
               (return
                (f64.const 2147483647)
               )
              )
             )
             (loop $label$5 (result i64)
              (block
               (if
                (i32.eqz
                 (get_global $hangLimit)
                )
                (return
                 (get_local $3)
                )
               )
               (set_global $hangLimit
                (i32.sub
                 (get_global $hangLimit)
                 (i32.const 1)
                )
               )
              )
              (block $label$6 (result i64)
               (return
                (get_local $3)
               )
              )
             )
            )
           )
           (block $label$7 (result i32)
            (return
             (get_local $3)
            )
           )
           (i32.trunc_u/f32
            (call $func_4
             (loop $label$8 (result f64)
              (block
               (if
                (i32.eqz
                 (get_global $hangLimit)
                )
                (return
                 (get_local $3)
                )
               )
               (set_global $hangLimit
                (i32.sub
                 (get_global $hangLimit)
                 (i32.const 1)
                )
               )
              )
              (if (result f64)
               (get_local $2)
               (f64.const 18446744073709551615)
               (get_local $3)
              )
             )
             (br_if $label$0
              (br_if $label$0
               (f64.const 0)
               (i32.const 110)
              )
              (if (result i32)
               (i32.eqz
                (get_local $1)
               )
               (i32.const 255)
               (i32.const -128)
              )
             )
            )
           )
          )
         )
        )
        (i32.const 31)
       )
      )
      (i32.const 4)
     )
     (i32.const 4)
    )
    (i32.const 4)
   )
  )
 )
 (func $func_13 (result i32)
  (local $0 f32)
  (local $1 i32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i32.const -45)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i32)
   (return
    (get_local $1)
   )
  )
 )
 (func $func_14 (result i64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i64.const 255)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i64.rotr
   (if (result i64)
    (f64.le
     (f64.const 9223372036854775808)
     (f64.const -nan:0xfffffffffffca)
    )
    (block $label$0 (result i64)
     (i64.const -75)
    )
    (block $label$1 (result i64)
     (nop)
     (nop)
     (select
      (block $label$8 (result i64)
       (i64.load16_s offset=4
        (i32.and
         (i32.load8_u offset=2
          (i32.and
           (loop $label$9 (result i32)
            (block
             (if
              (i32.eqz
               (get_global $hangLimit)
              )
              (return
               (i64.const -1)
              )
             )
             (set_global $hangLimit
              (i32.sub
               (get_global $hangLimit)
               (i32.const 1)
              )
             )
            )
            (block $label$10 (result i32)
             (i32.const 0)
            )
           )
           (i32.const 31)
          )
         )
         (i32.const 31)
        )
       )
      )
      (if (result i64)
       (i32.eqz
        (i32.const 0)
       )
       (block $label$12 (result i64)
        (return
         (i64.const 796316177068464396)
        )
       )
       (block $label$13 (result i64)
        (i64.const -106)
       )
      )
      (i32.const 1259697983)
     )
    )
   )
   (select
    (call $func_2)
    (i64.extend_u/i32
     (i32.const 256)
    )
    (i32.const 169)
   )
  )
 )
 (func $func_15 (result i64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i64.const 255)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i64.const 2821)
 )
 (func $func_16 (result i32)
  (local $0 i32)
  (local $1 i64)
  (local $2 f64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (get_local $0)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i32)
   (return
    (i32.const -1)
   )
  )
 )
 (func $func_17 (param $0 f32) (result f64)
  (local $1 f64)
  (local $2 f64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (f64.const 1.1754943508222875e-38)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (call $func_7)
 )
 (func $func_18 (result i64)
  (local $0 f32)
  (local $1 i32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i64.const -82)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i64)
   (return
    (i64.const -70)
   )
  )
 )
 (func $func_19
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return)
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (nop)
 )
 (func $func_20 (result i64)
  (local $0 i32)
  (local $1 f64)
  (local $2 f32)
  (local $3 f64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i64.const -9223372036854775808)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i64)
   (return
    (i64.const 168)
   )
  )
 )
 (func $func_21 (param $0 i64) (param $1 f32) (result f64)
  (local $2 i64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (f64.const -nan:0xfffffffffffdc)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (call $deNan64
   (select
    (if (result f64)
     (i32.eqz
      (select
       (i32.reinterpret/f32
        (call $func_4
         (if (result f64)
          (i32.const 241)
          (call_indirect $FUNCSIG$dd
           (call $deNan64
            (f64.neg
             (f64.const 0)
            )
           )
           (i32.const 4)
          )
          (loop $label$5 (result f64)
           (block
            (if
             (i32.eqz
              (get_global $hangLimit)
             )
             (return
              (f64.const 21)
             )
            )
            (set_global $hangLimit
             (i32.sub
              (get_global $hangLimit)
              (i32.const 1)
             )
            )
           )
           (block $label$6 (result f64)
            (return
             (f64.const -1)
            )
           )
          )
         )
         (call $deNan64
          (select
           (f64.const 1.1754943508222875e-38)
           (f64.const 0)
           (select
            (i32.const 117834755)
            (block $label$7 (result i32)
             (return
              (f64.const -37)
             )
            )
            (call_indirect $FUNCSIG$i
             (i32.const 0)
            )
           )
          )
         )
        )
       )
       (block $label$8 (result i32)
        (return
         (f64.const -9223372036854775808)
        )
       )
       (i32.const 101346317)
      )
     )
     (call_indirect $FUNCSIG$df
      (f32.const 1.3078619610967781e-22)
      (i32.const 9)
     )
     (block $label$9 (result f64)
      (return
       (f64.const -82)
      )
     )
    )
    (f64.const -112)
    (if (result i32)
     (if (result i32)
      (i32.const 22)
      (block $label$0 (result i32)
       (return
        (f64.const 9223372036854775808)
       )
      )
      (block $label$1 (result i32)
       (i32.store offset=3
        (i32.and
         (call $func_13)
         (i32.const 31)
        )
        (call $func_1
         (tee_local $1
          (tee_local $1
           (get_local $1)
          )
         )
         (block $label$2 (result f64)
          (call_indirect $FUNCSIG$v
           (i32.const 6)
          )
          (return
           (f64.const -nan:0xfffffffffffe8)
          )
         )
        )
       )
       (call_indirect $FUNCSIG$v
        (i32.const 6)
       )
       (return
        (f64.const -94)
       )
      )
     )
     (block $label$3 (result i32)
      (return
       (f64.const -nan:0xfffffffffffa0)
      )
     )
     (block $label$4 (result i32)
      (i32.const -20)
     )
    )
   )
  )
 )
 (func $func_22 (result f32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (f32.const 0)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result f32)
   (call_indirect $FUNCSIG$v
    (if (result i32)
     (i32.eqz
      (if (result i32)
       (i32.eqz
        (loop $label$1 (result i32)
         (block
          (if
           (i32.eqz
            (get_global $hangLimit)
           )
           (return
            (f32.const 515)
           )
          )
          (set_global $hangLimit
           (i32.sub
            (get_global $hangLimit)
            (i32.const 1)
           )
          )
         )
         (block $label$2 (result i32)
          (return
           (f32.const 2315)
          )
         )
        )
       )
       (block $label$3 (result i32)
        (loop $label$4 (result i32)
         (block
          (if
           (i32.eqz
            (get_global $hangLimit)
           )
           (return
            (f32.const 18446744073709551615)
           )
          )
          (set_global $hangLimit
           (i32.sub
            (get_global $hangLimit)
            (i32.const 1)
           )
          )
         )
         (block $label$5 (result i32)
          (drop
           (loop $label$6 (result i64)
            (block
             (if
              (i32.eqz
               (get_global $hangLimit)
              )
              (return
               (f32.const -1)
              )
             )
             (set_global $hangLimit
              (i32.sub
               (get_global $hangLimit)
               (i32.const 1)
              )
             )
            )
            (block $label$7 (result i64)
             (return
              (f32.const 1)
             )
            )
           )
          )
          (i32.load8_s offset=22
           (i32.and
            (i32.const 65505)
            (i32.const 31)
           )
          )
         )
        )
       )
       (block $label$8 (result i32)
        (return
         (f32.const 252)
        )
       )
      )
     )
     (block $label$9 (result i32)
      (nop)
      (i32.const 65535)
     )
     (block $label$19 (result i32)
      (i32.const -115)
     )
    )
   )
   (f32.const -nan:0x7fff82)
  )
 )
 (func $hangLimitInitializer
  (set_global $hangLimit
   (i32.const 100)
  )
 )
 (func $deNan32 (param $0 f32) (result f32)
  (if (result f32)
   (f32.eq
    (get_local $0)
    (get_local $0)
   )
   (get_local $0)
   (f32.const 0)
  )
 )
 (func $deNan64 (param $0 f64) (result f64)
  (if (result f64)
   (f64.eq
    (get_local $0)
    (get_local $0)
   )
   (get_local $0)
   (f64.const 0)
  )
 )
)
